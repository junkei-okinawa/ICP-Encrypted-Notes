type DeviceError = variant {
  DeviceNotRegistered;
  AlreadyRegistered;
  UnknownPublicKey;
  KeyNotSynchronized;
};
type EncryptedNote = record { id : nat; data : text };
type Result = variant { Ok : text; Err : DeviceError };
type Result_1 = variant { Ok; Err : DeviceError };
service : {
  addNote : (text) -> ();
  getNotes : () -> (vec EncryptedNote) query;
  deleteNote : (nat) -> ();
  updateNote : (EncryptedNote) -> ();
  registerDevice : (text, text) -> ();
  deleteDevice : (text) -> ();
  getDeviceAliases : () -> (vec text) query;
  isEncryptedSymmetricKeyRegistered : () -> (bool) query;
  registerEncryptedSymmetricKey : (text, text) -> (Result_1);
  uploadEncryptedSymmetricKeys : (vec record { text; text }) -> (Result_1);
  getUnsyncedPublicKeys : () -> (vec text) query;
  getEncryptedSymmetricKey : (text) -> (Result) query;
};
